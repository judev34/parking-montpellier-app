openapi: 3.0.0
info:
  description: "Portail API permettant l'accès à certaines ressources mises à disposition par Montpellier Méditerranée Métropole. Les données sont accessibles au format standardisé Fiware."
  version: "1.0.0"
  title: "Open Data Montpellier Méditerranée Métropole"
  termsOfService: "https://data.montpellier3m.fr/mentions-l%C3%A9gales"
  contact:
    email: "opendata3m@montpellier3m.fr"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"


servers: 
  - url: https://portail-api-data.montpellier3m.fr


paths:
  /bikestation:
    get:
      tags:
       - Disponibilité des vélos Vélomagg
     # summary: Get bike stations list
     # description: Returns bike stations list
      #operationId: BikeStationList
      #produces:
      # - application/json
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: |-
            Returns entities whose ID matches one of the elements in the list.
            ex: "urn:ngsi-ld:station:001"
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 1000
          description: Limit the number of elements of entities to return (max 1000)
          required: true

      responses:
        '200': 
          description: Data model example https://smart-data-models.github.io/dataModel.Transportation/BikeHireDockingStation/examples/example-normalized.json
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Bikestation'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error


  /bikestation_timeseries/{bikeStationId}/attrs/availableBikeNumber:
    get:
      tags:
       - Historique des places Vélomagg
      #summary: Query Bike Station Time Series data
      #description: Query Bike Station Time Series data
      #operationId: querybikestationtimeseriesdata
      #produces:
      # - application/json
      parameters:
       -  name: "bikeStationId"
          in: path
          description: |-
            ex:
            "urn:ngsi-ld:station:001"
          schema:
            type: string
          required: true
            
       -  name: fromDate
          in: query
          description: |-
            ex: 
            "2022-01-01T00:00:00"
          schema:
            type: string
          required: true

       -  name: toDate
          in: query
          description: |-
            ex: 
            "2023-12-31T23:59:59"
          schema:
            type: string
          required: true
      responses:
        '200': 
          description: |-
            Data model example https://smart-data-models.github.io/dataModel.Transportation/BikeHireDockingStation/examples/example-normalized.json
            
            First recorded date at 2023-01-04
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BikestationTimeseries'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error


  /offstreetparking:
    get:
      tags:
       - Disponibilité des places dans les parkings de Montpellier Méditerranée Métropole
      #summary: Get off street parking list
      #description: Returns off street parking list
      #operationId: OffStreetParkingList
      #:
      # - application/json
      parameters:

        - in: query
          name: id
          schema:
            type: string
          description: |-
            Returns entities whose ID matches one of the elements in the list.
            ex: "urn:ngsi-ld:parking:001"
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 1000
          description: Limit the number of elements of entities to return (max 1000)
          required: true
      responses:
        '200': 
          description: Data model example https://smart-data-models.github.io/dataModel.Parking/OffStreetParking/examples/example-normalized.json
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OffStreetParking'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error


  /parkingspaces:
    get:
      tags:
       - Parking en ouvrage
      #summary: Get parking spaces list
      #description: Returns parking spaces list
      #operationId: ParkingSpacesList
      #produces:
      # - application/json
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: |-
            Returns entities whose ID matches one of the elements in the list.
            ex: "urn:ngsi-ld:ParkingSpace:34172_ARCTRI"
          required: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
            default: 1000
          description: Limit the number of elements of entities to return (max 1000)
          required: true
      responses:
        '200': 
          description: Data model example 
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Parkingspace'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error

   
  /parking_timeseries/{parkingId}/attrs/availableSpotNumber:
    get:
      tags:
       - Historique des places de parking en ouvrage
      #summary: Query Parking Time Series data
      #description: Query Parking Time Series data
      #operationId: queryparkingtimeseriesdata
      #produces:
      # - application/json
      parameters:
       -  name: "parkingId"
          in: "path"
          description: |-
            ex:
            "urn:ngsi-ld:parking:001"
          schema:
            type: string
          required: true

       -  name: fromDate
          in: query
          description: |-
            ex: 
            "2022-01-01T00:00:00"
          schema:
            type: string
          required: true
        
       -  name: toDate
          in: query
          description: |-
            ex: 
            "2023-12-31T23:59:59"
          schema:
            type: string
          required: true
      responses:
        '200': 
          description: |-
            Data model example https://smart-data-models.github.io/dataModel.Parking/OffStreetParking/examples/example-normalized.json
            
            First recorded date at 2023-01-04
            
            N.B La liste des identifiants des parkings souterrains (parkingId) sont disponibles via l’API « Disponibilité des places dans les parkings de Montpellier Méditerranée Métropole ».
            
            Ex : « urn:ngsi-ld:parking:001 »  
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OffStreetParkingTimeseries'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error


  /pmr:
    get:
      tags:
       - Disponibilité des places pmr
      #summary: Get disabled parking list
      #description: Returns disabled parking list
      operationId: DisabledParkingList
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: |-
            Returns entities whose ID matches one of the elements in the list.
            ex: "urn:ngsi-ld:Pmr:654"
          required: false
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
            default: 1000
          description: Limit the number of elements of entities to return (max 1000)
          required: true
      responses:
        '200': 
          description: Data model example
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/pmr'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error


#  /pmr_timeseries/{pmrId}/attrs/slotStatus:
#    get:
#      tags:
#       - Historique des places pmr
#      #summary: Query Disabled Parking Time Series data
#      #description: Query Disabled Parking Time Series data
#      #operationId: querydisabledparkingtimeseriesdata
#      #produces:
#      # - application/json
#      parameters:
#        
#       -  name: "pmrId"
#          in: "path"
#          description: |-
#            ex:
#            "urn:ngsi-ld:Pmr:478"
#          schema:
#            type: string
#          required: true
#
#       -  name: fromDate
#          in: query
#          description: |-
#            ex: 
#            "2022-03-22T00:00:00"
#          schema:
#            type: string
#          required: true
#        
#       -  name: toDate
#          in: query
#          description: |-
#            ex: 
#            "2022-03-22T23:59:59"
#          schema:
#            type: string
#          required: true
#      responses:
#        '200': 
#          description: |-
#            Data model example
#
#            First recorded date at 2022-08-11
#          content:
#            application/json:
#              schema: 
#                $ref: '#/components/schemas/pmr'
#        "404": 
#          description: Entity not Found   
#        "405":
#          description:  Method Not Allowed
#        "429":
#          description:  Too many requests ( max per second 100, max per hour 20000)
#        "500": 
#          description: Internal Error


  /ecocounter_timeseries/{ecocounterId}/attrs/intensity:
    get:
      tags:
       - Historique des comptages vélo et piéton
     # summary: Query Eco Counter Time Series data
     # description: Query Eco Counter Time Series data
      #operationId: queryecocountertimeseriesdata
      #produces:
      # - application/json
      parameters:    
       -  name: "ecocounterId"
          in: "path"
          description: |-
            ex:
            "urn:ngsi-ld:EcoCounter:XTH19101158"
          schema:
            type: string
          required: true

       -  name: fromDate
          in: query
          description: |-
            ex: 
            "2022-01-01T00:00:00"
          schema:
            type: string
          required: true
        
       -  name: toDate
          in: query
          description: |-
            ex: 
            "2023-12-31T23:59:59"
          schema:
            type: string
          required: true
      responses:
        '200': 
          description: |-
            Data model example

            Le smart data modèle des Eco-Compteurs n’est pas encore disponible sur le site https://smartdatamodels.org/ pour cette raison le modèle actuel est un schéma personnalisé et proposé par la Métropole de Montpellier.

            First recorded date at 2023-01-12
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/EcocounterTimeseries'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error


  /ecocounter:
    get:
      tags:
       - Description Eco-Compteurs
      #summary: Get eco counter list
      #description: Returns eco counter list
      #operationId: EcoCounterList
      #produces:
      # - application/json
      parameters:
       -  in: query
          name: id
          description: |-
            Returns entities whose ID matches one of the elements in the list.
            ex: "urn:ngsi-ld:EcoCounter:XTH19101158"
          schema:
            type: string
          required: false
       -  in: query
          name: limit
          schema:
            type: integer
            default: 1000
          description: Limit the number of elements of entities to return (max 1000)
          required: true
      responses:
        '200': 
          description: |- 
            Le smart data modèle des Eco-Compteurs n’est pas encore disponible sur le site https://smartdatamodels.org/ pour cette raison le modèle actuel est un schéma personnalisé et proposé par la Métropole de Montpellier.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Ecocounter'
        "404": 
          description: Entity not Found   
        "405":
          description:  Method Not Allowed
        "429":
          description:  Too many requests ( max per second 10000, max per hour 2000000)
        "500": 
          description: Internal Error



          
  # /tamgtfs:
    # get:
      # tags:
       # - tamgtfs
      # summary: TAM GTFS entities list
      # description: Returns TAM GTFS entities list
      # operationId: TamGtfsEntitiesList
      # produces:
       # - application/json
      # parameters:
       # -
        # name: id
        # in: query
        # description: |-
          # Returns entities whose ID matches one of the elements in the list.
          # ex: 
          # "urn:ngsi-ld:GtfsAgency:001"
          # "urn:ngsi-ld:CalendarRule:001"
          # "urn:ngsi-ld:CalendarDateRule:001"
          # "urn:ngsi-ld:GtfsRoute:001"
          # "urn:ngsi-ld:GtfsStop:001"
          # "urn:ngsi-ld:GtfsStopTime:001"
          # "urn:ngsi-ld:GtfsTransferRule:001"
          # "urn:ngsi-ld:GtfsTrip:001"
        # required: false
        # type: string
       # -
        # name: limit
        # in: query
        # description: Limits the number of entities to be retrieved
        # required: true
        # type: number
        # default: 100
        # maximum: 1000
        # minimum: 0
        # format: integer
      # responses:
        # "200": 
          # description: Return Entity
        # "404": 
          # description: Entity not Found   
        # "405":
          # description:  Method Not Allowed
        # "429":
          # description:  Too many requests ( max per second 100, max per hour 20000)
        # "500": 
          # description: Internal Error
    





components:
    schemas:
      Bikestation:
        type: object 
        properties:
            id: 
              type: string
              example: 'urn:ngsi-ld:station:001'
              
            type: 
              type: string
              example: 'BikeHireDockingStation'

            address:
              type: object
              properties:
                type:
                  type: string
                  example :  'PostalAddress'
                value:
                  type : object
                  properties:
                    addressCountry:
                      type : string
                      example : "FR"
                    addressLocality:
                      type : string
                      example : "Montpellier"
                    streetAddress:
                      type : string
                      example : "Rue Jules Ferry - Gare Saint-Roch"
                metadata:
                  type: object
            
            availableBikeNumber:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Number'
                value : 
                  type : integer 
                  example : 12
                metadata:
                  type : object
                  properties:
                    timestamp:
                      type : object
                      properties:
                        type :
                          type : string
                          example : 'DateTime'
                        value : 
                          type : string
                          example : '2022-10-26T10:35:03.000Z'
            
            freeSlotNumber :
              type: object
              properties:
                type:
                  type: string
                  example :  'Number'
                value:
                    type : integer
                    example : 9
                metadata:
                  type: object
                  
            totalSlotNumber :
              type: object
              properties:
                type:
                  type: string
                  example :  'Number'
                value:
                    type : integer
                    example : 12
                metadata:
                  type: object
            
            location:
              type: object
              properties:
                type:
                  type: string
                  example :  'geo:json'
                value:
                  type : object
                  properties:
                    type:
                      type: string
                      example :  'Point'
                    coordinates :
                        type: array
                        items: 
                          example : 3.881346 , 43.605366
                metadata:
                  type: object
            
            status:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Text'
                value : 
                  type : string
                  example : 'working'
                metadata:
                  type : object

      OffStreetParking:
        type: object 
        properties:
            id: 
              type: string
              example: 'urn:ngsi-ld:parking:001'
              
            type: 
              type: string
              example: 'OffStreetParking'
              
            allowedVehicleType:
              type: object
              properties:
                type:
                  type: string
                  example :  'StructuredValue'
                value:
                  type : array
                  items:
                    type : string
                    example : car , moped
                metadata:
                  type: object
                  
            availableSpotNumber:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Number'
                value : 
                  type : integer 
                  example : 138
                metadata:
                  type : object
                  properties:
                    timestamp:
                      type : object
                      properties:
                        type :
                          type : string
                          example : 'DateTime'
                        value : 
                          type : string
                          example : '2022-10-24T11:26:59.000Z'

            category:
              type: object
              properties:
                type:
                  type: string
                  example :  'StructuredValue'
                value:
                  type : array
                  items:
                    type : string
                    example : feeCharged , barrierAccess , underground
                metadata:
                  type: object

            layout:
              type: object
              properties:
                type:
                  type: string
                  example :  'StructuredValue'
                value:
                  type : array
                  items:
                    type : string
                    example : multiLevel
                metadata:
                  type: object

            location:
              type: object
              properties:
                type:
                  type: string
                  example :  'geo:json'
                value:
                  type : object
                  properties:
                    type:
                      type: string
                      example :  'Point'
                    coordinates :
                        type: array
                        items: 
                          example : 3.88881893 , 43.60871606
                metadata:
                  type: object

            name :
              type: object
              properties:
                type:
                  type: string
                  example :  'Text'
                value:
                    type : string
                    example : 'Antigone'
                metadata:
                  type: object

            requiredPermit :
              type: object
              properties:
                type:
                  type: string
                  example :  'Text'
                value:
                    type : string
                    example : 'noPermitNeeded'
                metadata:
                  type: object         
                  
            status:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Text'
                value : 
                  type : string
                  example : 'Open'
                metadata:
                  type : object
                  properties:
                    timestamp:
                      type : object
                      properties:
                        type :
                          type : string
                          example : 'DateTime'
                        value : 
                          type : string
                          example : '2022-10-24T11:26:59.000Z'                  
                  
            totalSpotNumber :
              type: object
              properties:
                type:
                  type: string
                  example :  'Number'
                value:
                    type : integer
                    example : 239
                metadata:
                  type: object 


      pmr:
         type: object 
         properties:
             id: 
               type: string
               example: 'urn:ngsi-ld:Pmr:452'
              
             type: 
               type: string
               example: 'PMR'
              
             Latitude:
               type: object
               properties:
                 type: 
                   type: string 
                   example : 'Double'
                 value : 
                   type : number
                   example : 43.6004246831643
                 metadata:
                   type : object

             Longitude:
               type: object
               properties:
                 type: 
                   type: string 
                   example : 'Double'
                 value : 
                   type : number
                   example : 3.90040595142034
                 metadata:
                   type : object
            
             TimeInstant:
               type: object
               properties:
                 type: 
                   type: string 
                   example : 'DateTime'
                 value : 
                   type : string
                   example : '2022-10-17T19:13:00.374Z'
                 metadata:
                   type : object
            
             slotStatus:
               type: object
               properties:
                 type: 
                   type: string 
                   example : 'Float'
                 value : 
                   type : number
                   example : 
                 metadata:
                   type : object


     
      Ecocounter:
        type: object 
        properties:
            id: 
              type: string
              example: 'urn:ngsi-ld:EcoCounter:XTH19101158'
              
            type: 
              type: string
              example: 'EcoCounter'
             
            TimeInstant:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'DateTime'
                value : 
                  type : string
                  example : '2022-10-17T20:46:17.541Z'
                metadata:
                  type : object
                  
            deviceType:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Text'
                value : 
                  type : string
                  example : 
                metadata:
                  type : object

            intensity:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Integer'
                value : 
                  type : number
                  example :
                metadata:
                  type : object
            
            laneId:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Integer'
                value : 
                  type : number
                  example : 
                metadata:
                  type : object
                  
            latitude:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Double'
                value : 
                  type : number
                  example : 
                metadata:
                  type : object

            longitude:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Double'
                value : 
                  type : number
                  example : 
                metadata:
                  type : object
                  
            reversedLane:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Text'
                value : 
                  type : string
                  example : 
                metadata:
                  type : object
                  
            vehicleType:
              type: object
              properties:
                type: 
                  type: string 
                  example : 'Text'
                value : 
                  type : string
                  example : 
                metadata:
                  type : object
          
       
      Parkingspace:
        type: object 
        properties:
            id: 
              type: string
              example: 'urn:ngsi-ld:ParkingSpace:34172_ARCTRI'
              
            type: 
              type: string
              example: 'ParkingSpace'
            
            name:
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "Arc de Triomphe"
              
            insee: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "34172"
              
            address: 
             type: object
             properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "rue Foch"
              
            typeOfUse: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "tous"
              
            isFree: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "false"
              
            parkingSpaceNumber: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "451"
              
            disabledParkingNumber: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : 
              
            maxHeight: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "190"
              
            siretNumber: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "21340172202058"
              
            longitude: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "3.873200750000000"
              
            latitude: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "43.611002669999998"
              
            typology: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "centre-ville"
              
            domaniality: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "public"
              
            owner: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "ville de Montpellier"
              
            usableSurfaceArea: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "9375"
              
            levelNumber: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "5"
              
            publicSpaces: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "438"
              
            remainingSpaces: 
              type: object
              properties:
                type: 
                  type: string 
                  example : "Text"
                value : 
                  type : string
                  example : "0"
       
      EcocounterTimeseries:
        type: object
        properties:
            attrName:
                type: string
                example: "intensity"
            entityId:
                type: string
                example: "urn:ngsi-ld:EcoCounter:XTH19101158"
            index:
                type: array
                items:
                    type: string
                example: ["2022-12-19T00:00:00.000+00:00", "2022-12-20T00:00:00.000+00:00"]
            values:
                type: array
                items: 
                    type: integer
                example: [14,3] 
    
      OffStreetParkingTimeseries:
        type: object
        properties:
            attrName:
                type: string
                example: "availableSpotNumber"
            entityId:
                type: string
                example: "urn:ngsi-ld:parking:001"
            index:
                type: array
                items:
                    type: string
                example: ["2022-12-20T00:02:55.000+00:00", "2022-12-21T00:02:55.000+00:00"]
            values:
                type: array
                items: 
                    type: integer
                example: [161,160]
      
      BikestationTimeseries:
        type: object
        properties:
          attrName:
              type: string
              example: "availableBikeNumber"
          entityId:
              type: string
              example: "urn:ngsi-ld:station:001"
          index:
              type: array
              items:
                  type: string
              example: ["2022-12-19T17:57:46.000+00:00", "2022-12-29T17:57:46.000+00:00"]
          values:
              type: array
              items: 
                  type: integer
                  example: [12,11]